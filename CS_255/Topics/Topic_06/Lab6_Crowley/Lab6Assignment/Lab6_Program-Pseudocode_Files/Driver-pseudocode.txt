/*
 * Driver-pseudocode.txt
 *
 *  Created on: July 3, 2018
 *      Author: Kamilla Murashkina
 */

// The input files may contain any bytes, so default reading methods cannot be used.
// The bytes have to be read asis, without any conversion.

global OUTPUT_STREAM debugStream

void compareFiles( constant string& firstFile, constant string& secondFile)

    INPUT_STREAM fin1(firstFile)  IN BINARY MODE
    INPUT_STREAM fin2(secondFile) IN BINARY MODE

    if ( fin1 NOT OPENED ) throw runtime_error("Cannot open file "+firstFile+" for reading")
    if ( fin2 NOT OPENED ) throw runtime_error("Cannot open file "+secondFile+" for reading")

    int             blockCount = 0
    constexpr int   BLOCKSIZE  = 1024
    char            buffer1[BLOCKSIZE]
    char            buffer2[BLOCKSIZE]

    loop
    
        constant int length1 = fin1.read( buffer1, BLOCKSIZE )  // READ RAW BYTES
        constant int length2 = fin2.read( buffer2, BLOCKSIZE )  // READ RAW BYTES

        if ( length1 != length2 )
        
            throw runtime_error(
                    string("Sizes of the files are different")
                  + ", file " + firstFile  + " has size " + to_string(length1+BLOCKSIZE*blockCount)
                  + ", file " + secondFile + " has size " + to_string(length2+BLOCKSIZE*blockCount)
            )
        endif

        for ( int i=0; i < length1; ++i )
        
            if (buffer1[i]!=buffer2[i])
            
                throw runtime_error(
                       "Files are different at position " + to_string(i+BLOCKSIZE*blockCount)
                     + ", file " + firstFile  + " has character " + safeString(buffer1[i])
                     + ", file " + secondFile + " has character " + safeString(buffer2[i])
                )
            endif

        endfor

        if ( length1 == 0 ) break

        ++blockCount

    endloop

    fin1.close()
    fin2.close()

endfunction

void testEncoding(

    HuffmanCodec&     huffmanCodec,
    constant string&  inputFile,
    constant string&  encodedFile
)
    INPUT_STREAM fin(inputFile) IN BINARY MODE
    if ( fin NOT OPENED ) throw runtime_error("Cannot open file "+inputFile+" for reading")

    OUTPUT_STREAM fout(encodedFile);
    if ( fout NOT OPENED ) throw runtime_error("Cannot open file "+encodedFile+" for writing")

    debugStream << "Encoding " << inputFile << " -> " << encodedFile << "\n\n" 
    debugStream.FLUSH()  // language specific 0 - flush buffered data to the output console/file

    DO_HUFFMAN_ENCODING_FROM_INPUT_TO_OUTPUT_STREAM( fin, fout )

    fin.close()
    fout.close()

endfunction

void testDecoding(

    HuffmanCodec&    huffmanCodec,
    constant string& encodedFile,
    constant string& decodedFile
)

    INPUT_STREAM fin(encodedFile)   // now open encoded file for reading
    if ( fin NOT OPENED ) throw runtime_error("Cannot open file "+encodedFile+" for reading")

    OUTPUT_STREAM fout(decodedFile) IN BINARY MODE
    if ( fout NOT OPENED ) throw runtime_error("Cannot open file "+decodedFile+" for writing")

    debugStream << "Decoding " << encodedFile << " -> " << decodedFile << "\n"
    debugStream.FLUSH()  // language specific 0 - flush buffered data to the output console/file

    DO_HUFFMAN_DECODING_FROM_INPUT_TO_OUTPUT_STREAM( fin, fout )

    fin.close()
    fout.close()

endfunction

void testFile(int numberFile)

    constant string& number        = to_string(numberFile)
    constant string& debugFile     = number+"_debug.txt"
    constant string& inputFile     = number+"_in.txt"
    constant string& encodedFile   = number+"_encoded.txt"
    constant string& decodedFile   = number+"_decoded.txt"
   
    debugStream.open(debugFile)

    stdout << "*** Testing file " << inputFile << ", debug output file " << debugFile << " ***\n" 
    stdout.FLUSH()  // language specific 0 - flush buffered data to the output console/file

    HuffmanCodec huffmanCodec

    testEncoding( huffmanCodec, inputFile,   encodedFile )
    testDecoding( huffmanCodec, encodedFile, decodedFile )
    compareFiles( inputFile, decodedFile )

    debugStream << "\n!!! Files " << inputFile << " and " << decodedFile << " are equal.\n" 
    debugStream.close()

    stdout << "\nOK\n\n" 
    stdout.FLUSH()  // language specific 0 - flush buffered data to the output console/file

endfunction

int main()

    try
    
        for ( int i=1; i<=9; ++i ) testFile(i)

    catch ( constant exception& ex )
    
       if ( debugStream )
           debugStream << "Exception:" << ex.what() << "\n"

       stdout << "Exception:" << ex.what() << "\n"

    endtry

endmainfunction

