/*
 * HuffmanTree-pseudocode.txt
 *
 *  Created on: July 3, 2018
 *      Author: Kamilla Murashkina
 */

// If implementing without generics, substitute Byte for T

class HuffmanTree<T>

   public

        constructor( const T byte, constant int frequency )

                byte_      = byte
                frequency_ = frequency 
                left_      = null      
                right_     = null     

        constructor( constant HuffmanTree* first, constant HuffmanTree* second )

                byte_ = '\0' 
                frequency_ = first->frequency_+second->frequency_ 
                left_      = first->frequency_ <= second->frequency_ ? first  : second 
                right_     = first->frequency_ <= second->frequency_ ? second : first 

        destructor()  // C++ only

                delete left_
                delete right_

        int  getFrequency() constant

                return frequency_

        T    getByte() constant

                return byte_

        constant HuffmanTree* getLeft() constant

                return left_

        constant HuffmanTree* getRight() constant

                return right_

        boolean isTerminal() constant

                return left_ == null && right_ == null

    private

        constant T                byte_
        constant int              frequency_
        constant HuffmanTree<T>*  left_       // 0
        constant HuffmanTree<T>*  right_      // 1

endclass


