// If the generic classes and interfaces seem too complex, just write a code
// that works with concrete classes and int or Integer keys and values.
//
// Some languages do not require to specify variable/function types but you 
// shall specify types (or hints) if possible.
//
// If the language requires it, use int where plain number is enough and use 
// a pointer to int or Integer type where the value can be a number or the null. 
//
// Use const or final instead of constant keyword if the language supports it. Otherwise 
// diregard (omit) it.
//
// & and * in variable definitions are C++ specific hints. Disregard them
// if using other languages.
//
// In value1 EQUAL value2, you must use language specific comparison that compares
// values data, not just references. For example, in the case of Java Integer type,
// value1 == value2 compares two references and so cannot be used.
//
// Some languages do not have null keyword and so you need to replace it appropriately.
// For example, use nullptr in C++.
//
// Some languages have vectors. If not, replace vector with an appropriate array type.
//
// INPUT_STREAM and OUTPUT_STREAM are to be replaced with language specific
// input/output streams. Replace stdout with a stream corresponding the standard
// output (usually your terminal or console).
//
// stream << expression means write the expression value as text to the stream.
// stream >> variable means read from the stream, convert from text, and assign to 
// the variable. Replace << and >> with appropriate language constructs. 

class Driver

	constant int tableSize    = 191	// hash tables size
	constant int doubleFactor = 181	// factor R to be used in double hashing

	OUTPUT_STREAM	fout		// declare and create an output stream
	vector<Integer>	data		// all keys from the input file

	void testKeyValue ( 

		string&				 description
		HashInterface<Integer,Integer>&	 hashTable
		constant Integer		 key
		constant Integer		 value	
	)
		constant int previousCollisions = hashTable.getCollisions()

		hashTable.put(key,value)

		constant Integer*  retrievedValue = hashTable.get(key)
		constant string&   retrievedText  = retrievedValue != null ? toString(*retrievedValue) : "null"

		fout << key << " : " << value << " -> " << retrievedText   
                     << ", collisions " << (hashTable.getCollisions()-previousCollisions) << "\n"
		
		if ( retrievedValue == null || ! ( *retrievedValue EQUAL value )  ) 
			fout << "Retrieved value " << retrievedText << " does not match stored value " << value
                             << " for key " << key << "\n" 	
			throw runtime_error("value mismatch")

	void testInputKey (

		constant Integer  	          key
		HashInterface<Integer,Integer>&	  lph
		HashInterface<Integer,Integer>&	  qph
		HashInterface<Integer,Integer>&	  dhph
	)	
		constant Integer  value = key*2
		
		testKeyValue( "Linear   ", lph,  key, value ) 
		testKeyValue( "Quadratic", qph,  key, value ) 
		testKeyValue( "Double   ", dhph, key, value )

		fout << "\n"

	void testData (
	
		constant string& description
	)
		fout << "*** " << description << " Start *** " << "\n\n"
 	
		LinearProbingHash<Integer,Integer>        lph  ( tableSize )
		QuadraticProbingHash<Integer,Integer>     qph  ( tableSize )
		DoubleHashingProbingHash<Integer,Integer> dhph ( tableSize, doubleFactor ) 

		for ( variable key : data ) testInputKey(key,lph,qph,dhph)	

		fout << "Linear    " << lph.getCollisions()  << " collisions\n"
		fout << "Quadratic " << qph.getCollisions()  << " collisions\n"
		fout << "Double    " << dhph.getCollisions() << " collisions\n"

		fout << "\n*** " << description << " End *** " << "\n\n"
		
	void readData ( 

		constant string&  inputFile
	)
		INPUT_STREAM  fin(inputFile)		
		Integer       key

		while ( fin >> key ) data.push_back(key)

		fin.close()

	void testFile (

		constant string&	inputFilename
		constant string&	outputFilename
	)
		stdout << "Input file " << inputFilename << ", output file " << outputFilename << "\n"

		readData ( inputFilename  )
		fout.open( outputFilename )

		testData( "Random Order" )

		SORT_IN_ASCENDING_ORDER( data )   // replace with appropriate actual code
		testData( "Ascending Order" )

		SORT_IN_DESCENDING_ORDER( data )  // replace with appropriate actual code
		testData( "Descending Order" )

		fout.close()

		stdout << "Done\n"

	void main()

		try
			testFile( "in150.txt", "out150.txt" )
			testFile( "in160.txt", "out160.txt" )
			testFile( "in170.txt", "out170.txt" )

		catch ( constant exception& ex )

			stdout << "Exception: << ex.whatMessage() << "\n"

				
		